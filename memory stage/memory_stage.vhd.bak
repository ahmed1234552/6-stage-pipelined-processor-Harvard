library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity memory_stage is

port (
    clk: in std_logic;
    reset : in std_logic;
    enable: in std_logic;
    e_m_buffer_in: in std_logic_vector(64 downto 0);
    flags_out: out std_logic_vector(2 downto 0);
    m_wb_buffer_out: out std_logic_vector(64 downto 0)
);
end memory_stage;

architecture arch of memory_stage is 

signal address: std_logic_vector(9 downto 0);
signal data_in_mem: std_logic_vector(15 downto 0);
signal m_m_buffer_out :  std_logic_vector(64 downto 0); 
signal m_wb_buffer_in :  std_logic_vector(64 downto 0); 
signal data_out: std_logic_vector(15 downto 0);
signal re,we: std_logic;
-- create a stack pointer with inital value 1022
signal SP: std_logic_vector(9 downto 0) := "1111111110";
begin
    address <= e_m_buffer_in(42 downto 33) when e_m_buffer_in(10) = '0' else SP; --alu result & flags & instruction & control signals
    data_in_mem <= e_m_buffer_in(64 downto 49);
-- update stack pointer
    SP <= std_logic_vector(unsigned(SP) + 1) when e_m_buffer_in(9) = '1' and unsigned(SP) < 1022 else
        std_logic_vector(unsigned(SP) - 1) when e_m_buffer_in(10) = '1' and unsigned(SP) > 922 else SP;
    re<= e_m_buffer_in(9) or e_m_buffer_in(12); -- 16 ALU_reslut 3 flags 16 inst 14 contorls 
    we<= e_m_buffer_in(10) or e_m_buffer_in(11) or  m_m_buffer_out(11);
    ram_inst: entity work.ram port map(
        clk => clk,
        we => we,
        re => re,
        addr => address,
        data_in => data_in_mem,
        data_out => data_out
    );
m_m_buffer : ENTITY work.Generic_Register  generic map (65)  port map
( clk , reset, enable , e_m_buffer_in, m_m_buffer_out);

m_wb_buffer_in <=  data_out & m_m_buffer_out(48 downto 0 );

m_wb_buffer : ENTITY work.Generic_Register  generic map (65)  port map
( clk , reset, enable ,m_wb_buffer_in,  m_wb_buffer_out);
   -- Buffer here
    flags_out <= e_m_buffer_in(32 downto 30);

end arch;